AWSTemplateFormatVersion: 2010-09-09
Description: |
  Cloudformation template for milliseconds converter application
  This app runs on application load balancer
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.  
Resources:
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for ALB #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebServersSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for App only from ALB #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WebServerLT:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        ImageId: ami-08f3d892de259504d
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds: 
          - !Ref WebServersSecurityGroup   
        Tags:
            - Key: Name
              Value: !Sub Web Server of ${AWS::StackName} Stack
        UserData: 
          Fn::Base64: !Sub |
            #! /bin/bash
            yum update -y
            yum install python3 -y
            pip3 install flask
            wget -P templates https://raw.githubusercontent.com/Rehab19/my-clarusway-workshop/master/002-milliseconds-converter/templates/index.html
            wget -P templates https://raw.githubusercontent.com/Rehab19/my-clarusway-workshop/master/002-milliseconds-converter/templates/result.html
            wget https://raw.githubusercontent.com/Rehab19/my-clarusway-workshop/master/002-milliseconds-converter/app.py
            python3 app.py

  WebServersTG:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref WebServersSecurityGroup
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - subnet-31e55c7c
        - subnet-3626d217
        - subnet-7fd57671
        - subnet-d1bb518e
        - subnet-e3370add
        - subnet-fd09e79b
      Type: application
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - TargetGroupArn: !Ref WebServersTG
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer #required
      Port: 80 #required
      Protocol: HTTP #required
  WebServerASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        !GetAZs ""
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.LatestVersionNumber
      MaxSize: 3 #required
      MinSize: 1 #required
      TargetGroupARNs:
        - !Ref WebServersTG
Outputs:
  WebsiteURL:
    Description: Milliseconds Converter Application Load Balancer URL
    Value: !Sub 
      - http://${ALBaddress}
      - ALBaddress: !GetAtt ApplicationLoadBalancer.DNSName